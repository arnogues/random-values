"use strict";

//var prod = process.argv.indexOf("build") !== -1;

// var assert = require('assert');
var rv = require("../lib");

describe("#random()", function() {
  it("should return random value from an array with one cell", function() {
    expect(rv.random([1])).toEqual(1);
  });

  it("should return random value from an array with multiple cells", function() {
    /* eslint-disable */
    var ok;
    /* eslint-enable */
    var arr = [1, 2, 3, 4, 5];
    var value;
    var i;

    ok = true;
    for (i = 0; i < 1000; i++) {
      value = rv.random(arr);
      if (!(value >= 1 && value <= 5)) {
        ok = false;
        break;
      }
    }

    expect(ok).toBe(true);
  });

  it("should return random value between 2 numbers", function() {
    var ok = true;
    for (var i = 0; i < 1000; i++) {
      var value = rv.random(1, 3);
      if (!(value >= 1 && value <= 3)) {
        ok = false;
        break;
      }
    }
    expect(ok).toBe(true);
  });

  it("should return random value between 2 numbers and multiplied by multiplicator", function() {
    var testArray = [1000, 2000, 3000];
    var ok = true;

    for (var i = 0; i < 1000; i++) {
      var value = rv.random(1, 3, 1000);
      if (testArray.indexOf(value) === -1) {
        ok = false;
        break;
      }
    }

    expect(ok).toBe(true);
  });
});

describe("#ratioArray()", function() {
  it("should return an array with item generated by ratio", function() {
    var arr = rv.ratioArray("manwomen", {
      man: 3,
      woman: 4
    });

    expect(arr).toStrictEqual([
      "man",
      "man",
      "man",
      "woman",
      "woman",
      "woman",
      "woman"
    ]);
  });

  it("should cache the previous array", function() {
    var arr = rv.ratioArray("manwomen", []);
    expect(arr).toStrictEqual([
      "man",
      "man",
      "man",
      "woman",
      "woman",
      "woman",
      "woman"
    ]);
  });
});

describe("#byRatio()", function() {
  it("should return 1 value", function() {
    var value = rv.byRatio("manwoman", {
      man: 3
    });
    expect(value).toEqual("man");
  });
  it("should return the previous cached array", function() {
    var value = rv.byRatio("manwoman", {
      woman: 3
    });
    expect(value).toEqual("man");
  });
  it("should return overwrite the previous cached array", function() {
    var value = rv.byRatio(
      "manwoman",
      {
        woman: 3
      },
      true
    );
    expect(value).toEqual("woman");
  });

  it("should return randomize rational values", function() {
    var value;
    var i;
    var man = 0;
    var woman = 0;
    var iterations = 10000;
    for (i = 0; i < iterations; i++) {
      value = rv.byRatio("manwoman", {
        man: 3,
        woman: 7
      });
      /* eslint-disable */
      switch (value) {
        case "man":
          man++;
          break;
        case "woman":
          woman++;
          break;
      }
      /* eslint-enable */
    }
    man = man / iterations;
    woman = woman / iterations;
    expect(man < 0.32 && woman > 0.69).toBe(true);
  });

  it("should return randomized rational values with numbers", function() {
    var value;
    var i;
    var r;
    var iterations = 10000;
    var results = [0, 0, 0, 0, 0];
    for (i = 0; i < iterations; i++) {
      value = rv.byRatio("numbers", {
        0: 25,
        1: 30,
        2: 15,
        3: 10,
        4: 20
      });
      results[value]++;
    }
    r = results.map(function(item) {
      return item / iterations;
    });
    expect(
      r[0] < 0.265 &&
        r[1] < 0.315 &&
        r[2] < 0.165 &&
        r[3] < 0.115 &&
        r[4] < 0.215
    ).toBe(true);
  });
});

describe("#randomArray()", function() {
  var array = [1, 2, 3, 4, 5];

  it("should return the random number of elements between 1 or 5", function() {
    var result = rv.randomArray(array);
    expect(result.length >= 1 && result.length <= 5).toBe(true);
  });

  it("should return the complete array if the number of elements is 5", function() {
    var result = rv.randomArray(array, 4);
    expect(result.length).toEqual(4);
  });

  it("should return the complete array if the number of elements is 5", function() {
    var result = rv.randomArray(array, 5);
    expect(result.sort()).toStrictEqual(array);
  });
});
