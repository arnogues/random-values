'use strict';

var assert = require('assert');
var rv = require('../src');

describe('random-values.random()', function () {
  it('should return random value from an array with one cell', function () {
    assert.equal(rv.random([1]), 1, 'we expect to have 1');
  });


  it('should return random value from an array with multiple cells', function () {
    /* eslint-disable */
    var ok;
    /* eslint-enable */
    var arr = [1, 2, 3, 4, 5];
    var value;
    var i;

    ok = true;
    for (i = 0; i < 1000; i++) {
      value = rv.random(arr);
      if (!(value >= 1 && value <= 5)) {
        ok = false;
        break;
      }
    }

    assert(rv, 'we expect to have 1');
  });

  it('should return random value between 2 numbers', function () {
    var ok = true;
    for (var i = 0; i < 1000; i++) {
      var value = rv.random(1, 3);
      if (!(value >= 1 && value <= 3)) {
        ok = false;
        break;
      }
    }
    assert(ok, 'we expect to have 1, i value = ' + i);
  });

  it('should return random value between 2 numbers and multiplied by multiplicator', function () {
    var testArray = [1000, 2000, 3000];
    var ok = true;

    for (var i = 0; i < 1000; i++) {
      var value = rv.random(1, 3, 1000);
      if (testArray.indexOf(value) === -1) {
        ok = false;
        break;
      }
    }

    assert(ok, 'wevar xpect to have 1, i value = ' + i);
  });
});

describe('random-values.ratioArray()', function () {
  it('should return an array with item generated by ratio', function () {
    var arr = rv.ratioArray({
      man: 3,
      woman: 4
    });

    assert.deepEqual(arr, ['man', 'man', 'man', 'woman', 'woman', 'woman', 'woman'], 'we expect to have ["man", "man", "man", "woman", "woman", "woman", "woman"]');
  });
});

describe('random-values.byRatio()', function () {
  it('should return randomize rational values', function () {
    var value;
    var i;
    var man = 0;
    var woman = 0;
    var iterations = 10000;

    for (i = 0; i < iterations; i++) {
      value = rv.byRatio('manwoman', {
        man: 3,
        woman: 7
      });

      /* eslint-disable */
      switch (value) {
        case 'man' :
          man++;
          break;
        case 'woman':
          woman++;
          break;
      }
      /* eslint-enable */
    }

    man = man / iterations;
    woman = woman / iterations;

    assert(man < 0.32 && woman > 0.69, 'we expect to have man less than 0.35 and woman more than 0.65');

  });

  it('should return randomize rational values with numbers', function () {
    var value;
    var i;
    var r;
    var iterations = 10000;
    var results = [0, 0, 0, 0, 0];

    for (i = 0; i < iterations; i++) {
      value = rv.byRatio('numbers', {
        0: 25,
        1: 30,
        2: 15,
        3: 10,
        4: 20
      });

      results[value]++;
    }
    r = results.map(function (item) {
      return item / iterations;
    });

    assert(r[0] < 0.265 && r[1] < 0.315 && r[2] < 0.165 && r[3] < 0.115 && r[4] < 0.215, 'we expect to have number generated proportionnaly [0.25,0.30,0.15,0.10,0.20], but we have ratios ' + r.join(','));
  });
});

describe('random-values.randomArray()', function () {
  var array = [1, 2, 3, 4, 5];

  it('should return the complete array if the number of elements is 5', function () {
    var result = rv.randomArray(array, 4);
    assert.equal(result.length, 4, 'we expect result is 4 length');
  });


  it('should return the complete array if the number of elements is 5', function () {
    var result = rv.randomArray(array, 5);
    assert.deepEqual(result.sort(), array, 'we expect result is [1,2,3,4,5]');
  });
});
